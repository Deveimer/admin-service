package doctors

import (
	"net/http"

	"github.com/Deveimer/goofy/pkg/goofy"
	"github.com/Deveimer/goofy/pkg/goofy/errors"
	"main/internal/models"
	"main/internal/stores"
	"main/utils"
)

type DoctorService struct {
	store stores.Doctor
}

func New(store stores.Doctor) *DoctorService {
	return &DoctorService{store: store}
}

func (s *DoctorService) Create(ctx *goofy.Context, doctor *models.DoctorRequest) (interface{}, error) {
	existingId, err := s.store.CheckDoctorExist(ctx, doctor.Phone, doctor.Email, doctor.LicenceNumber)
	if _, ok := err.(errors.EntityNotFound); !ok && err != nil {
		return nil, err
	}

	if existingId != "" {
		return nil, errors.Response{
			StatusCode: http.StatusBadRequest,
			Status:     http.StatusText(http.StatusBadRequest),
			Reason:     "doctor already exist, please check email, phone, licence number",
		}
	}

	doctortDetails := models.DoctorDetails{
		Name:          doctor.Name,
		Gender:        doctor.Gender,
		Phone:         doctor.Phone,
		Email:         doctor.Email,
		Age:           doctor.Age,
		City:          doctor.City,
		State:         doctor.State,
		Pincode:       doctor.Pincode,
		LicenceNumber: doctor.LicenceNumber,
		Status:        "New",
	}

	password, err := utils.GenerateNumericUniqueId(8)
	if err != nil {
		ctx.Logger.Errorf("error while generating autogenerated password for new doctor")
		return nil, err
	}

	doctortDetails.Password = password

	id, err := utils.GenerateAlphaNumericUniqueId(8)
	if err != nil {
		ctx.Logger.Errorf("error while generating doctor id")
		return nil, err
	}

	doctortDetails.Id = id

	salt, err := utils.GenerateAlphaNumericUniqueId(12)
	if err != nil {
		ctx.Logger.Errorf("error while generating salt for new doctor")
		return nil, err
	}

	doctortDetails.Salt = salt

	res, err := s.store.Create(ctx, &doctortDetails)
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (s *DoctorService) Get(ctx *goofy.Context, id string) (*models.DoctorDetails, error) {
	doctorDetails, err := s.store.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	return doctorDetails, nil
}

func (s *DoctorService) Update(ctx *goofy.Context, doctorDetails *models.DoctorRequest, id string) (*models.DoctorDetails, error) {
	existingDoctor, err := s.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	if (doctorDetails.Phone != "" || doctorDetails.Email != "") &&
		(existingDoctor.Phone != existingDoctor.Phone || existingDoctor.Email != existingDoctor.Email) {
		existingId, err := s.store.CheckDoctorExist(ctx, doctorDetails.Phone, doctorDetails.Email, doctorDetails.LicenceNumber)
		if err != nil {
			return nil, err
		}

		if existingId != "" {
			return nil, errors.Response{
				StatusCode: http.StatusBadRequest,
				Status:     http.StatusText(http.StatusBadRequest),
				Reason:     "email or phone already registered with another patient",
			}
		}
	}

	doctor, err := s.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	updatedResponse, err := s.store.Update(ctx, doctorDetails, doctor.Id)
	if err != nil {
		return nil, err
	}

	return updatedResponse, nil
}

func (s *DoctorService) Delete(ctx *goofy.Context, id string) error {
	patient, err := s.Get(ctx, id)
	if err != nil {
		return err
	}

	err = s.store.Delete(ctx, patient.Id)
	if err != nil {
		return err
	}

	return nil
}

package patients

import (
	"github.com/Deveimer/goofy/pkg/goofy"

	"main/internal/models"
	"main/internal/stores"
	"main/utils"
)

type PatientService struct {
	store stores.Patient
}

func New(store stores.Patient) *PatientService {
	return &PatientService{store}
}

func (s *PatientService) Create(ctx *goofy.Context, patient *models.PatientRequest) (interface{}, error) {
	patientDetails := models.PatientDetails{
		Name:    patient.Name,
		Gender:  patient.Gender,
		Phone:   patient.Phone,
		Email:   patient.Email,
		Age:     patient.Age,
		City:    patient.City,
		State:   patient.State,
		Pincode: patient.Pincode,
		Status:  "New",
	}

	password, err := utils.GenerateNumericUniqueId(8)
	if err != nil {
		ctx.Logger.Errorf("error while generating autogenerated password for new patient")
		return nil, err
	}

	patientDetails.Password = password

	id, err := utils.GenerateAlphaNumericUniqueId(8)
	if err != nil {
		ctx.Logger.Errorf("error while generating patient id")
		return nil, err
	}

	patientDetails.Id = id

	salt, err := utils.GenerateAlphaNumericUniqueId(12)
	if err != nil {
		ctx.Logger.Errorf("error while generating salt for new patient")
		return nil, err
	}

	patientDetails.Salt = salt

	details, err := s.store.Create(ctx, &patientDetails)
	if err != nil {
		return nil, err
	}

	return details, nil
}

func (s *PatientService) Get(ctx *goofy.Context, patient *models.PatientRequest) (*models.PatientDetails, error) {
	return nil, nil
}

func (s *PatientService) Update(ctx *goofy.Context, patient *models.PatientRequest) (*models.PatientDetails, error) {
	return nil, nil
}

func (s *PatientService) Delete(ctx *goofy.Context, patient *models.PatientRequest) error {
	return nil
}
